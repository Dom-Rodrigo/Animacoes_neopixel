#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"

// Definição de pinos para matriz de LEDs 5x5
#define ROWS 5
#define COLS 5
uint8_t row_pins[ROWS] = {2, 3, 4, 5, 6};
uint8_t col_pins[COLS] = {7, 8, 9, 10, 11};

// Definição de pinos para o teclado matricial
#define KEYPAD_ROWS 4
#define KEYPAD_COLS 4
uint8_t keypad_row_pins[KEYPAD_ROWS] = {12, 13, 14, 15};
uint8_t keypad_col_pins[KEYPAD_COLS] = {16, 17, 18, 19};

// Mapear teclas do teclado matricial
const char keypad[KEYPAD_ROWS][KEYPAD_COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

// Fontes para as letras da mensagem "EmbarcaTech"
const uint8_t letter_patterns[][ROWS] = {
    {0x1E, 0x11, 0x1F, 0x11, 0x11}, // E
    {0x1F, 0x12, 0x1F, 0x12, 0x12}, // m
    {0x1F, 0x10, 0x1E, 0x01, 0x1F}, // b
    {0x1F, 0x12, 0x12, 0x12, 0x12}, // a
    {0x11, 0x11, 0x1F, 0x11, 0x1F}, // r
    {0x1E, 0x01, 0x0F, 0x01, 0x1E}, // c
    {0x1F, 0x11, 0x1F, 0x04, 0x0E}, // a
    {0x1F, 0x04, 0x0E, 0x04, 0x1F}, // T
    {0x1F, 0x14, 0x1C, 0x14, 0x1F}, // e
    {0x11, 0x15, 0x1F, 0x15, 0x11}, // c
    {0x1E, 0x11, 0x1E, 0x12, 0x1E}  // h
};

// Inicializar GPIOs
void init_pins() {
    for (int i = 0; i < ROWS; i++) {
        gpio_init(row_pins[i]);
        gpio_set_dir(row_pins[i], GPIO_OUT);
    }

    for (int i = 0; i < COLS; i++) {
        gpio_init(col_pins[i]);
        gpio_set_dir(col_pins[i], GPIO_OUT);
    }

    for (int i = 0; i < KEYPAD_ROWS; i++) {
        gpio_init(keypad_row_pins[i]);
        gpio_set_dir(keypad_row_pins[i], GPIO_OUT);
        gpio_put(keypad_row_pins[i], 1);
    }

    for (int i = 0; i < KEYPAD_COLS; i++) {
        gpio_init(keypad_col_pins[i]);
        gpio_set_dir(keypad_col_pins[i], GPIO_IN);
        gpio_pull_down(keypad_col_pins[i]);
    }
}

// Exibir padrão na matriz de LEDs
void display_pattern(const uint8_t pattern[ROWS]) {
    for (int row = 0; row < ROWS; row++) {
        gpio_put(row_pins[row], 1);
        for (int col = 0; col < COLS; col++) {
            gpio_put(col_pins[col], !(pattern[row] & (1 << col)));
        }
        sleep_ms(2);
        gpio_put(row_pins[row], 0);
    }
}

// Ler tecla do teclado matricial
char read_keypad() {
    for (int row = 0; row < KEYPAD_ROWS; row++) {
        gpio_put(keypad_row_pins[row], 0);
        for (int col = 0; col < KEYPAD_COLS; col++) {
            if (gpio_get(keypad_col_pins[col]) == 1) {
                gpio_put(keypad_row_pins[row], 1);
                return keypad[row][col];
            }
        }
        gpio_put(keypad_row_pins[row], 1);
    }
    return '\0';
}

int main() {
    stdio_init_all();
    init_pins();

    while (1) {
        char key = read_keypad();
        if (key == '9') {
            for (int i = 0; i < sizeof(letter_patterns) / sizeof(letter_patterns[0]); i++) {
                for (int t = 0; t < 500; t++) {
                    display_pattern(letter_patterns[i]);
                }
                sleep_ms(200);
            }
        }
        sleep_ms(50);
    }
}
